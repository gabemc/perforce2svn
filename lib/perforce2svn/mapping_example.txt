# This is an example mapping file for describing a migration from
# Perforce into Subversion.

# Blank lines are ignored, and everything after the '#' character
# in a line is ignored.

# There are several commands, the most central of which is:
migrate //depot/perforce/path  /trunk/absolute/path

# As you can see, the migrate command takes 2 arguments: the
# path to migrate from and the path to migrate to.  It cannot
# handle individual files -- only directory structures.
# Each part of the command is separated by spaces, and multiple
# spaces are ignored.
#
# Also, it should be noted that all commands don't necessarily
# need to be on the same line.  If to continue a command on the
# next line, you can add a '\' character to the end of the line.
# So, the above command could have been written:
migrate //depot/perforce/path \
        /trunk/absolute/path

# If you have spaces in your path names, those spaces need to
# be escaped in a similar manner:
migrate //depot/another\ path\ with/spaces \
        /to\ a\ path/with/spaces

# There is a special directive that you need to be aware of:
svn-prefix /project/trunk

# This directive informs the mapping system that every SVN
# path farther down in the file that don't start with a '/'
# character will have this path prefix pre-pended.
#
# Paths that start with a '/' are considered absolute and
# will not be altered.
#
# Thus, the following commands are actually equivalent:
migrate //depot/perforce/path \
        /project/trunk/src/path
migrate //depot/perforce/path \
        src/path

# This feature is a convenience so that you don't have to type
# out the full path each time, which can become a hassle in
# a big migration.
#
# Note that you can call the 'svn-prefix' directive multiple
# times, and each relative SVN path that follows will
# have the directly preceeding directive take precedence.


# The 'migrate' command is obviously the most essential, but
# this tool provides several other convenience commands to help
# you migrate more complex directory structures.
#
# Each of these commands is pretty much the same as their
# SVN counterparts (with a few noted exceptions).

# The 'move' command moves paths internally within SVN after
# the migration:
move original/svn/path.txt \
     new/svn/path.txt

# The 'remove' command deletes paths internally
remove some/perforce/file/thats/no/longer/needed.sh

# The 'copy' command copies SVN paths, retaining their history
# within the tree
copy /some/absolute/file.txt \
     to/another/needed/location.txt

# The 'mkdir' command creates empty directories.  By default,
# directory structures are created for you when you copy
# or move files, but this is occasionally useful when you
# want to set up the standard Subversion layout.
mkdir /project/branches
mkdir /project/tags

# The 'add' command is a bit weird, as it will look at the
# 'live' sources that you have edited externally and passed
# in via the '--live-path' flag.  This migration tool will
# add the sources listed below that live path to the SVN
# repository.
#
# Obviously, this is an optional command, and if you don't
# need it, you don't need to supply the '--live-path' flag.
# If you have this directive, and the '--live-path' flag
# isn't present, the migration will fail and ask you for the 
# live path
add some/live/path/pom.xml

# Finally, there is the 'update' command that works very
# much like the 'add' command, but for files that already
# exist in the repository.
#
# You can skip these updates with the '--skip-updates'
# flag on the command line.  That is occasionally useful
# if you want to debug or manually push files after initial
# testing.
update some/path/that/exists/in/live/and/in/svn/Klass.java
